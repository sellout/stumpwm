;;; SBCL
#+sbcl
(progn
  (require 'asdf)
  (require 'stumpwm))
#+sbcl
(progn
  (load "stumpwm.asd")
  (sb-ext:save-lisp-and-die "stumpwm" :toplevel (lambda ()
                                                  ;; asdf requires sbcl_home to be set, so set it to the value when the image was built
                                                  (sb-posix:putenv (format nil "SBCL_HOME=~A" #.(sb-ext:posix-getenv "SBCL_HOME")))
                                                  (stumpwm:stumpwm)
                                                  0)
                            :executable t))

;;; CLISP

#+clisp
(progn
  (asdf:oos 'asdf:load-op 'stumpwm))
#+clisp
(progn
  (ext:saveinitmem "stumpwm" :init-function (lambda ()
                                              (stumpwm:stumpwm)
                                              (ext:quit))
                   :executable t :keep-global-handlers t :norc t :documentation "The StumpWM Executable"))


;;; OPENMCL

#+openmcl
(progn
  (require 'asdf)
  (require 'stumpwm))
#+openmcl
(progn
  (ccl:save-application "stumpwm" :prepend-kernel t :toplevel-function #'stumpwm:stumpwm))

;;; ECL

#+ ecl
(progn
  (require 'asdf)
#+ ecl
(asdf:make-build 'stumpwm :type :program :monolithic t
                 :epilogue-code '(progn
                                  (funcall (intern "STUMPWM" (find-package "STUMPWM")))
                                  0))

#-(or sbcl clisp openmcl ecl) (error "This lisp implementation is not supported.")
